#' @param batches A list of tibbles as returned by `collect_cdc_batches()`
#'
#' @return A single tibble with all rows
#' @seealso \code{harmonize_flag_column()}, \code{get_cdc()}
#' @keywords internal
bind_cdc_batches <- function(batches) {
dplyr::bind_rows(batches)
}
#' Retrieve and combine CDC dataset records with schema harmonization
#'
#' Downloads all records from a CDC Socrata dataset using paginated API calls,
#' harmonizes the presence of the `flag` column across batches (if applicable),
#' and returns a single tibble.
#'
#' This function wraps the three-step process of:
#' 1. Collecting paginated data chunks
#' 2. Ensuring consistent schema (with respect to the `flag` column)
#' 3. Binding all records into a single tibble
#'
#' @param series_id A Socrata dataset ID string (e.g., "489q-934x")
#'
#' @return A tibble containing all records from the dataset with consistent columns
#' @examples
#' \dontrun{
#'   suicide_qtr <- get_cdc("489q-934x")
#'   suicide_final <- get_cdc("p7se-k3ix")
#' }
#'
#' @seealso \code{collect_cdc_batches()}, \code{harmonize_flag_column()}, \code{bind_cdc_batches()}
#' @export
get_cdc <- function(series_id) {
return(bind_cdc_batches(harmonize_flag_column(collect_cdc_batches(series_id))))
}
#' Coerce column types for finalized CDC dataset (e.g., 'p7se-k3ix')
#'
#' @param df A tibble with finalized structure
#' @return A tibble with proper types
#' @noRd
clean_cdc_finalized <- function(df) {
df$topic             <- as.factor(df$topic)
df$classification    <- as.factor(df$classification)
df$classification_id <- as.integer(df$classification_id)
df$group             <- as.factor(df$group)
df$group_id          <- as.integer(df$group_id)
df$group_order       <- as.integer(df$group_order)
df$subgroup          <- as.factor(df$subgroup)
df$subgroup_id       <- as.integer(df$subgroup_id)
df$subgroup_order    <- as.integer(df$subgroup_order)
df$estimate_type     <- as.factor(df$estimate_type)
df$estimate_type_id  <- as.integer(df$estimate_type_id)
df$time_period       <- as.Date(paste0(df$time_period, "-01-01"))
df$time_period_id    <- as.integer(df$time_period_id)
df$estimate          <- as.numeric(df$estimate)
df$standard_error    <- as.numeric(df$standard_error)
df$estimate_lci      <- as.numeric(df$estimate_lci)
df$estimate_uci      <- as.numeric(df$estimate_uci)
df$footnote_id_list  <- as.factor(df$footnote_id_list)
df$flag <- as.factor(ifelse(is.na(df$flag), "None", df$flag))
# Move time_period and time_period_id to the front
if (all(c("time_period", "time_period_id") %in% names(df))) {
new_order <- c("time_period", "time_period_id", setdiff(names(df), c("time_period", "time_period_id")))
df <- df[, new_order]
}
return(df)
}
#' Coerce column types for historical CDC dataset (e.g., '9j2v-jamp')
#'
#' @param df A tibble with historical structure
#' @return A tibble with proper types
#' @noRd
clean_cdc_historical <- function(df) {
df$indicator        <- as.factor(df$indicator)
df$unit             <- as.factor(df$unit)
df$unit_num         <- as.integer(df$unit_num)
df$stub_name        <- as.factor(df$stub_name)
df$stub_name_num    <- as.integer(df$stub_name_num)
df$stub_label       <- as.factor(df$stub_label)
df$stub_label_num   <- as.integer(df$stub_label_num)
df$year             <- as.Date(paste0(df$year, "-01-01"))
df$year_num         <- as.integer(df$year_num)
df$age              <- as.factor(df$age)
df$age_num          <- as.integer(df$age_num)
df$estimate         <- as.numeric(df$estimate)
df$flag <- as.factor(ifelse(is.na(df$flag), "None", df$flag))
# Move 'year' and 'year_num' to the first two columns
if (all(c("year", "year_num") %in% names(df))) {
new_order <- c("year", "year_num", setdiff(names(df), c("year", "year_num")))
df <- df[, new_order]
}
return(df)
}
#' Coerce column types for quarterly provisional CDC dataset (e.g., '489q-934x')
#'
#' @param df A tibble with quarterly structure
#' @return A tibble with proper types
#' @noRd
clean_cdc_quarterly <- function(df) {
df$year <- as.Date(paste0(substr(df$year_and_quarter, 1, 4), "-01-01"))
df$quarter <- factor(substr(df$year_and_quarter, 6, 7), levels = c("Q1", "Q2", "Q3", "Q4"))
df$year_and_quarter <- NULL
# Convert all columns starting with "rate_" EXCEPT "rate_type" to numeric
rate_cols <- grep("^rate_", names(df), value = TRUE)
rate_cols <- setdiff(rate_cols, "rate_type")
for (col in rate_cols) {
df[[col]] <- suppressWarnings(as.numeric(df[[col]]))
}
df$cause_of_death <- as.factor(df$cause_of_death)
df$rate_type <- as.factor(df$rate_type)
df$unit <- as.factor(df$unit)
if (all(c("year", "quarter") %in% names(df))) {
new_order <- c("year", "quarter", setdiff(names(df), c("year", "quarter")))
df <- df[, new_order]
}
return(df)
}
#' Detect the CDC dataset structure based on column hash
#'
#' @param df A tibble returned from bind_cdc_batches()
#' @return A string indicating which cleaning function to use
#' @noRd
detect_cdc_structure <- function(df) {
hash <- digest::digest(paste(names(df)), algo = "md5")
switch(hash,
"4c9cd083d29433984eb29d9451bada25" = "clean_cdc_finalized",
"fcec76284a2e1e8701ceb4eabbf94827" = "clean_cdc_historical",
"e0397317d335549d8244da964f07e598" = "clean_cdc_quarterly",
NULL
)
}
# Test IDs
ID01 <- "p7se-k3ix"
ID02 <- "9j2v-jamp"
ID03 <- "489q-934x"
get_cdc_tidy <- function(series_id) {
tmp <- bind_cdc_batches(harmonize_flag_column(collect_cdc_batches(series_id)))
cleaner <- detect_cdc_structure(tmp)
if (!is.null(cleaner)) {
tmp <- do.call(cleaner, list(tmp))
return(tmp)
}
}
tmp01 <- get_cdc_tidy(ID01)
tmp02 <- get_cdc_tidy(ID02)
tmp03 <- get_cdc_tidy(ID03)
str(tmp01)
str(tmp02)
str(tmp03)
# FRED data pipeline functions
#' Sanitize a Date Input for FRED Queries
#'
#' Normalizes date input to `"YYYY-MM-DD"` format, allowing flexible entry formats
#' including `"YYYY"`, `"YYYY-MM"`, and `"YYYY-MM-DD"` with either slashes or dashes.
#' Ensures the input is a valid date and returns it as a properly formatted character string.
#'
#' @seealso \code{get_fred_series_raw()}
#'
#' @param date_input A character string (e.g., "2024", "2024-06", "2024/06/13")
#'   or a `Date` object to be cleaned and standardized.
#'
#' @return A character string in `"YYYY-MM-DD"` format.
#'
#' @examples
#'
#' \dontrun{
#' sanitize_date("2024")
#' sanitize_date("2024-06")
#' sanitize_date("2024/06/13")
#' sanitize_date(as.Date("2024-06-13"))
#' }
#'
#' @keywords internal
sanitize_date <- function(date_input) {
# If it's already a Date, return in correct format
if (inherits(date_input, "Date")) {
return(format(date_input, "%Y-%m-%d"))
}
if (!is.character(date_input)) {
stop("date_input must be a character string or Date object")
}
# Normalize all separators to dashes
date_input <- gsub("/", "-", date_input)
# Add missing month/day defaults
if (grepl("^\\d{4}$", date_input)) {
date_input <- paste0(date_input, "-01-01")
} else if (grepl("^\\d{4}-\\d{1,2}$", date_input)) {
date_input <- paste0(date_input, "-01")
}
# Validate final format
date_parsed <- as.Date(date_input)
if (is.na(date_parsed)) {
stop(
"Invalid date format. Expected YYYY, YYYY-MM, or YYYY-MM-DD (slashes or dashes allowed)."
)
}
return(format(date_parsed, "%Y-%m-%d"))
}
#' Retrieve Raw FRED Series Data
#'
#' Queries the Federal Reserve Economic Data (FRED) API for a specific series
#' between a start and end date. Returns the parsed JSON response as a list or data frame.
#' This retrieves a single series and is used in [get_fred()]
#'
#' @param series_id A character string representing the FRED series ID (e.g., `"UNRATE"`).
#' @param start_date The start date of the series in `"YYYY"`, `"YYYY-MM"`, `"YYYY-MM-DD"` format,
#'   or a `Date` object.
#' @param end_date The end date of the series in `"YYYY"`, `"YYYY-MM"`, `"YYYY-MM-DD"` format,
#'   or a `Date` object.
#'
#' @seealso \code{sanitize_date()}, \code{get_fred()}
#'
#' @return A named list containing the parsed JSON response from the FRED API.
#'
#' @details This function depends on the `FRED_KEY` environment variable to authenticate with
#' the API. Dates are cleaned using [sanitize_date()] to ensure valid API query formatting.
#'
#' @examples
#' \dontrun{
#' Sys.setenv(FRED_KEY = "your_fred_api_key")
#' get_fred_series_raw("UNRATE", "2020", "2021-12")
#' }
#'
#' @importFrom httr GET content
#' @importFrom jsonlite fromJSON
#' @keywords internal
get_fred_series_raw <- function(series_id, start_date, end_date) {
api_key <- Sys.getenv("FRED_KEY")
start_date_clean <- sanitize_date(start_date)
end_date_clean <- sanitize_date(end_date)
url <- paste0(
"https://api.stlouisfed.org/fred/series/observations?",
"series_id=",
series_id,
"&api_key=",
api_key,
"&file_type=json",
"&observation_start=",
start_date_clean,
"&observation_end=",
end_date_clean
)
res <- httr::GET(url)
res_text <- httr::content(res, as = "text", encoding = "UTF-8")
parsed <- jsonlite::fromJSON(res_text, flatten = TRUE)
return(parsed)
}
#' Tidy FRED Series Output
#'
#' Converts the raw `observations` component from a FRED API response
#' (as returned by [get_fred_series_raw()]) into a clean tibble with properly typed columns.
#' This is used inside the [get_fred()] function.
#'
#' @param fred_result A list returned by [get_fred_series_raw()], containing a named element `observations`
#'   with date and value fields.
#'
#' @seealso \code{get_fred_series_raw()}, \code{get_fred()}
#'
#' @return A tibble with two columns:
#' \describe{
#'   \item{date}{Date column parsed as `Date` class}
#'   \item{value}{Numeric value of the series observation}
#' }
#'
#' @examples
#' \dontrun{
#' raw <- get_fred_series_raw("UNRATE", "2020", "2021")
#' tidy_fred_series(raw)
#' }
#'
#' @importFrom tibble as_tibble
#' @importFrom dplyr transmute
#' @keywords internal
tidy_fred_series <- function(fred_result) {
df <- fred_result$observations
df <- tibble::as_tibble(df) |>
dplyr::transmute(date = as.Date(date), value = as.numeric(value))
return(df)
}
#' Retrieve and Tidy FRED Series Data
#'
#' A convenience wrapper that retrieves a FRED time series using [get_fred_series_raw()]
#' and immediately formats it using [tidy_fred_series()]. Returns a clean tibble of
#' observations between the specified dates.
#'
#' @details Internally uses [get_fred_series_raw()] to fetch the raw JSON data and [tidy_fred_series()] to format the result.
#'
#' @param series_id A character string representing the FRED series ID (e.g., `"UNRATE"`).
#' @param start_date Start date of the time series in `"YYYY"`, `"YYYY-MM"`, `"YYYY-MM-DD"` format,
#'   or a `Date` object.
#' @param end_date Optional. End date in the same format as `start_date`. Defaults to today's date.
#'
#' @seealso \code{get_fred_series_raw()}, \code{tidy_fred_series()}
#'
#' @return A tibble with `date` and `value` columns, one row per observation.
#'
#' @examples
#' \dontrun{
#' Sys.setenv(FRED_KEY = "your_fred_api_key")
#' get_fred("UNRATE", "2020-01-01")
#' }
#'
#' @export
get_fred <- function(series_id, start_date, end_date = Sys.Date()) {
return(tidy_fred_series(get_fred_series_raw(series_id, start_date, end_date)))
}
get_fred("VIXCLS")
get_fred(VIXCLS, 1990)
get_fred("VIXCLS", "1990")
get_fred("ICSA", "1990")
get_fred("ICNSA", "1990")
get_fred("CCSA", "1990")
get_fred("CCNSA", "1990")
get_fred("ADPMNUSNERNSA", "1990")
# BLS data pipeline functions
#' Split a Year Range into Fixed-Size Chunks
#'
#' Splits a range of years into chunks of up to a specified size (default 20 years).
#' Useful for APIs (like BLS) that restrict the maximum date range per request.
#' Not intended for direct use by end users.
#'
#' @param start_year An integer representing the starting year.
#' @param end_year An integer representing the ending year. Must be >= `start_year`.
#' @param chunk_size Maximum number of years per chunk. Defaults to 20.
#'
#' @return A list of lists, each containing `start` and `end` keys representing chunk boundaries.
#'
#' @examples
#'
#' \dontrun{
#' split_year_range(2000, 2023, chunk_size = 10)
#' }
#'
#' @seealso \code{get_bls_series_chunks()}
#'
#' @keywords internal
split_year_range <- function(start_year, end_year, chunk_size = 20) {
if (start_year > end_year)
stop("start_year must be <= end_year")
years <- seq(start_year, end_year)
chunks <- split(years, ceiling(seq_along(years) / chunk_size))
chunk_ranges <- lapply(chunks, function(yr) {
list(start = min(yr), end = max(yr))
})
return(chunk_ranges)
}
#' Retrieve a Single BLS Data Chunk
#'
#' Makes a single API request to the Bureau of Labor Statistics (BLS) public API
#' for one series over a limited year range (e.g., a 20-year chunk). Intended for internal use
#' inside [get_bls_series_chunks()], not called directly by users.
#'
#' @param series_id A character string representing the BLS series ID.
#' @param chunk A named list containing `start` and `end` years, typically produced by [split_year_range()].
#'
#' @return A parsed JSON object (as a list) containing the raw BLS API response.
#'
#' @details Requires the environment variable `BLS_KEY` to be set with a valid BLS API key.
#'
#' @examples
#' \dontrun{
#' chunk <- list(start = 2000, end = 2020)
#' Sys.setenv(BLS_KEY = "your_bls_api_key")
#' get_bls_chunk("LNS14000000", chunk)
#' }
#'
#' @importFrom httr POST content content_type_json
#' @importFrom jsonlite toJSON fromJSON
#' @seealso \code{get_bls_series_chunks()}
#' @keywords internal
get_bls_chunk <- function(series_id, chunk) {
json_body <- jsonlite::toJSON(
list(
seriesid = list(series_id),
startyear = chunk$start,
endyear = chunk$end,
registrationKey = Sys.getenv("BLS_KEY")
),
auto_unbox = TRUE
)
res <- httr::POST(
"https://api.bls.gov/publicAPI/v2/timeseries/data/",
body = json_body,
encode = "raw",
httr::content_type_json()
)
res_json <- httr::content(res, as = "text", encoding = "UTF-8")
parsed <- jsonlite::fromJSON(res_json, flatten = TRUE)
return(parsed)
}
#' Tidy a Single BLS API Response
#'
#' Cleans and formats the data portion of a single BLS API response. Converts types,
#' extracts date components, and returns a tidy tibble. Intended for internal use inside
#' [merge_bls_series_chunks()], not called directly by users.
#'
#' @param res A list object returned by [get_bls_chunk()], containing the nested `Results$series$data` structure.
#'
#' @return A tibble with columns: `date`, `year`, `month`, `value`, and `seriesID`.
#'
#' @examples
#' \dontrun{
#' raw <- get_bls_chunk("LNS14000000", list(start = 2000, end = 2020))
#' tidy_bls_single_result(raw)
#' }
#'
#' @importFrom dplyr mutate select
#' @importFrom stringr str_remove
#' @importFrom tibble as_tibble
#' @seealso \code{merge_bls_series_chunks()}
#' @keywords internal
tidy_bls_single_result <- function(res) {
series_df <- res[["Results"]][["series"]]
data_df <- series_df$data[[1]]
cleaned_df <- dplyr::mutate(
data_df,
year = as.integer(year),
value = as.numeric(value),
month = as.integer(stringr::str_remove(period, "M")),
date = as.Date(sprintf("%d-%02d-01", year, month)),
seriesID = series_df$seriesID
)
cleaned_df <- dplyr::select(cleaned_df, date, year, month, value, seriesID)
return(tibble::as_tibble(cleaned_df))
}
#' Retrieve and Aggregate BLS Data Chunks for a Series
#'
#' Iterates over a list of year chunks (e.g., from [split_year_range()]) and makes repeated API calls
#' using [get_bls_chunk()] to collect BLS data for a single series. Used internally by
#' [merge_bls_series_chunks()] to fetch all segments before merging.
#'
#' @param series_id A character string representing the BLS series ID.
#' @param chunk_list A list of year ranges, each with `start` and `end` values (as produced by [split_year_range()]).
#'
#' @return A list of raw BLS API response objects, one per chunk.
#'
#' @examples
#' \dontrun{
#' chunks <- split_year_range(2000, 2023, chunk_size = 10)
#' Sys.setenv(BLS_KEY = "your_bls_api_key")
#' get_bls_series_chunks("LNS14000000", chunks)
#' }
#'
#' @seealso \code{get_bls_chunk()}, \code{split_year_range()}
#' @keywords internal
get_bls_series_chunks <- function(series_id, chunk_list) {
results <- list()
for (chunk in chunk_list) {
chunk_result <- get_bls_chunk(series_id, chunk)
results <- append(results, list(chunk_result))
}
return(results)
}
#' Merge and Tidy Multiple BLS API Chunk Results
#'
#' Applies [tidy_bls_single_result()] to each result in a list of BLS API responses and combines
#' them into a single ordered tibble. Intended for internal use in the BLS data pipeline.
#'
#' @param result_list A list of BLS API response objects, typically returned by [get_bls_series_chunks()].
#'
#' @return A tibble combining all observations, sorted by `date`.
#'
#' @examples
#' \dontrun{
#' chunks <- split_year_range(2000, 2020)
#' raw_results <- get_bls_series_chunks("LNS14000000", chunks)
#' merged <- merge_bls_series_chunks(raw_results)
#' }
#'
#' @importFrom dplyr bind_rows arrange
#' @seealso \code{tidy_bls_single_result()}, \code{get_bls_series_chunks()}
#' @keywords internal
merge_bls_series_chunks <- function(result_list) {
results <- lapply(result_list, tidy_bls_single_result)
return(dplyr::arrange(dplyr::bind_rows(results), date))
}
#' Retrieve and Tidy BLS Series Data
#'
#' Fetches data for a single BLS series across a multi-year range. Handles API chunking automatically
#' by splitting large ranges into smaller segments (e.g., 20-year chunks), retrieving each piece via the
#' BLS API, tidying the results, and combining them into a single tibble.
#'
#' @details Internally uses [split_year_range()] to break the date range into chunks,
#' [get_bls_series_chunks()] to fetch each chunk from the API, and [merge_bls_series_chunks()]
#' to clean and combine the results.
#'
#' @param series_id A character string representing the BLS series ID (e.g., `"LNS14000000"`).
#' @param start_year An integer representing the starting year of the desired time series.
#' @param end_year An optional integer for the ending year. Defaults to the current year (`format(Sys.Date(), "%Y")`).
#'
#' @return A tibble with columns: `date`, `year`, `month`, `value`, and `seriesID`, one row per observation.
#'
#' @details Requires the `BLS_KEY` environment variable to be set with a valid BLS API key.
#'
#' @examples
#' \dontrun{
#' Sys.setenv(BLS_KEY = "your_bls_api_key")
#' get_bls("LNS14000000", 2000, 2023)
#' }
#'
#' @seealso \code{split_year_range()}, \code{get_bls_series_chunks()}, \code{merge_bls_series_chunks()}
#' @export
get_bls <- function(series_id,
start_year,
end_year = format(Sys.Date(), "%Y")) {
chunk_list <- split_year_range(start_year, end_year)
result_list <- get_bls_series_chunks(series_id, chunk_list)
return(merge_bls_series_chunks(result_list))
}
devtools::document()
devtools::check()
usethis::use_package("digest")
devtools::document()
devtools::check()
